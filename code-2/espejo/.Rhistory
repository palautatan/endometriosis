dim(presidents)
library(reshape2)
library(ggplot2)
ggplot(melt(presidents, id.vars=NULL), aes(x=value, fill=variable)) +
geom_histogram(binwidth=10, col="black", lwd=0.2) +
facet_wrap(~variable) +
theme_minimal()
presidents <- presidents %>% mutate(new_col=president-first_person)
ggplot(presidents, aes(x=new_col)) +
geom_histogram(binwidth=1, col="black", fill="gold2", lwd=0.2) +
theme_minimal()
0.2*4
0.2^3
n <- 31
p <- 0.2
n*p
n*(1-p)
n <- 31
p <- 10/31
n*p
n*(1-p)
p_0 <- 0.2
se  <- sqrt(p_hat*(1-p_hat)/n)
n <- 31
p_hat <- 10/31
n*p_hat
n*(1-p_hat)
p_0 <- 0.2
se  <- sqrt(p_hat*(1-p_hat)/n)
z   <- (p_hat - p_0) / se
p_0 <- 0.2
se  <- sqrt(p_hat*(1-p_hat)/n)
z   <- (p_hat - p_0) / se
z
2*pnorm(1.46, lower.tail=FALSE)
2*(1-pnorm(1.46))
p_hat
n <- 31
p_hat <- 10/31
n*p_hat
n*(1-p_hat)
dim(data)
z_star <- 1.96
m      <- 0.03
p_star <- 0.5
(z_star/m)^2*p_star*(1-p_star)
3+4+5
/3
library(readr)
endo <- read_csv("../../data/machine-learning/two-fold/model-8020.csv")[,-1]
names(endo)[1] <- "id"
head(endo)
View(endo)
133/8
133/7
library(readr)
endo <- read_csv("../../data/machine-learning/two-fold/model-8020.csv")[,-1]
names(endo)[1] <- "id"
head(endo)
library(dplyr)
gene_predictors <- endo %>% dplyr::select(-id, -tissue, -endometriosis, -severity)
outcome         <- ifelse(endo %>% dplyr::select(endometriosis)=="Endometriosis", 1, 0)
library(dplyr)
gene_predictors <- endo %>% dplyr::select(-id, -tissue, -endometriosis, -severity)
outcome         <- ifelse(endo %>% dplyr::select(endometriosis)=="Endometriosis", 1, 0)
library(SuperLearner)
# * GLMNET IS LASSO
sl_lib <- c("SL.mean", "SL.knn", "SL.svm", "SL.glmnet", "SL.randomForest", "SL.lda",  "SL.nnet", "SL.bayesglm")
library(SuperLearner)
# * GLMNET IS LASSO
sl_lib <- c("SL.mean", "SL.knn", "SL.svm", "SL.glmnet", "SL.randomForest", "SL.lda",  "SL.nnet", "SL.bayesglm")
sl_fit_nnls_f <- SuperLearner(Y=outcome, X=gene_predictors, family=binomial(), SL.library=sl_lib, cvControl=list(V=7))
sl_fit_nnls_f
sl_fit_auc_f <- SuperLearner(Y=outcome, X=gene_predictors, family=binomial(), SL.library=sl_lib_auc, method = "method.AUC", cvControl=list(V=7))
sl_lib_auc <- c("SL.mean", "SL.svm", "SL.glmnet", "SL.randomForest", "SL.lda",  "SL.nnet", "SL.bayesglm")
sl_fit_auc_f <- SuperLearner(Y=outcome, X=gene_predictors, family=binomial(), SL.library=sl_lib_auc, method = "method.AUC", cvControl=list(V=7))
sl_fit_auc_f <- SuperLearner(Y=outcome, X=gene_predictors, family=binomial(), SL.library=sl_lib_auc, method = "method.AUC", cvControl=list(V=7))
sl_fit_auc_f
sl_fit_ll_f <- SuperLearner(Y=outcome, X=gene_predictors, family=binomial(), SL.library=sl_lib, method = "method.NNloglik", cvControl=list(V=7))
sl_fit_ll_f
endo_2 <- read_csv("../../data/machine-learning/two-fold/validation-8020.csv")[,-1]
names(endo_2)[1] <- "id"
gene_predictors_2 <- endo_2 %>% dplyr::select(-id, -tissue, -endometriosis, -severity)
outcome_2         <- ifelse(endo_2 %>% dplyr::select(endometriosis)=="Endometriosis", 1, 0)
pred_nnls_f    <- predict(sl_fit_nnls_f, gene_predictors_2, onlySL=T)
pred_nnls_df_f <- data.frame(cbind(round(pred_nnls_f$pred), outcome_2))
sum(pred_nnls_df_f[,1]==pred_nnls_df_f[,2]) / nrow(pred_nnls_df_f)
pred_auc_f    <- predict(sl_fit_auc_f, newdata=gene_predictors_2)
pred_auc_df_f <- data.frame(cbind(round(pred_auc_f$pred), outcome_2))
sum(pred_auc_df_f[,1]==pred_auc_df_f[,2]) / nrow(pred_auc_df_f)
pred_ll_f    <- predict(sl_fit_ll_f, gene_predictors_2, onlySL=T)
sl_fit_ll_f <- SuperLearner(Y=outcome, X=gene_predictors, family=binomial(), SL.library=sl_lib_auc, method = "method.NNloglik", cvControl=list(V=7))
sl_fit_ll_f
pred_ll_f    <- predict(sl_fit_ll_f, gene_predictors_2, onlySL=T)
pred_ll_df_f <- data.frame(cbind(round(pred_ll_f$pred), outcome_2))
sum(pred_ll_df_f[,1]==pred_ll_df_f[,2]) / nrow(pred_ll_df_f)
which(pred_ll_df_f[,1]!=pred_ll_df_f[,2])
which(pred_auc_df_f[,1]!=pred_auc_df_f[,2])
which(pred_auc_df_f[,1]!=pred_auc_df_f[,2])
which(pred_ll_df_f[,1]!=pred_ll_df_f[,2])
which(pred_nnls_df_f[,1]!=pred_nnls_df_f[,2])
which(pred_auc_df_f[,1]!=pred_auc_df_f[,2])
which(pred_ll_df_f[,1]!=pred_ll_df_f[,2])
endo_2[c(8,15),]
library(ROCR)
plot_auc <- function(performance_s4_obj, title="") {
require(ggplot2)
perf_auc_rocr_df <- data.frame(cbind(x=unlist(performance_s4_obj@x.values),
y=unlist(performance_s4_obj@y.values)))
ggplot2::ggplot(perf_auc_rocr_df, aes(x=x, y=y)) +
geom_point() +
geom_line() +
xlab("Specificity") +
ylab("Sensitivity") +
ggtitle(title)
}
pred_auc_rocr_f <- prediction(predictions=pred_auc_f$pred, labels=outcome_2)
perf_auc_rocr_f <- performance(pred_auc_rocr_f,"tpr","fpr")
plot_auc(perf_auc_rocr_f, title="ROC under SuperLearner AUC Loss")
pred_nnls_rocr_f <- prediction(predictions=pred_nnls_f$pred, labels=outcome_2)
perf_nnls_rocr_f <- performance(pred_nnls_rocr_f,"tpr","fpr")
plot_auc(perf_nnls_rocr_f, title="ROC under SuperLearner NNLS Loss")
pred_ll_rocr_f <- prediction(predictions=pred_ll_f$pred, labels=outcome_2)
perf_ll_rocr_f <- performance(pred_ll_rocr_f,"tpr","fpr")
plot_auc(perf_ll_rocr_f, title="ROC under SuperLearner NNLL Loss")
CV.SL.out <- CV.SuperLearner(Y=outcome, X=gene_predictors, SL.library=sl_lib, family=binomial())
CV.SL.out <- CV.SuperLearner(Y=outcome, X=gene_predictors, SL.library=sl_lib, family=binomial(), cvControl=list(V=7))
cv_auc <- CV.SuperLearner(Y=outcome, X=gene_predictors, SL.library=sl_lib, family=binomial(), cvControl=list(V=7))
cv_auc
summary(cv_auc)
cv_auc$AllSL
summary(cv_auc)
summary(cv_auc)
cv_auc$AllSL
cv_auc <- CV.SuperLearner(Y=outcome, X=gene_predictors, SL.library=sl_lib, family=binomial(), cvControl=list(V=7), method="method.AUC")
summary(cv_auc)
cv_auc$AllSL
cv_auc <- CV.SuperLearner(Y=outcome, X=gene_predictors, SL.library=sl_lib_auc, family=binomial(), cvControl=list(V=7), method="method.AUC")
summary(cv_auc)
cv_auc$AllSL
pred_auc_rocr_f
perf_auc_rocr_f_auc <- performance(pred_auc_rocr_f, measure="auc")
perf_auc_rocr_f_auc
perf_auc_rocr_f_auc$y.values
perf_auc_rocr_f_auc@y.values
perf_auc_rocr_f_auc@y.values
perf_auc_rocr_f_auc@y.values[[1]]
perf_nnls_rocr_f_auc <- performance(pred_nnls_rocr_f, measure="auc")
perf_nnls_rocr_f_auc@y.values[[1]]
perf_nnll_rocr_f_auc <- performance(pred_ll_rocr_f, measure="auc")
perf_nnll_rocr_f_auc@y.values[[1]]
library(ROCR)
plot_auc <- function(performance_s4_obj, title="") {
require(ggplot2)
perf_auc_rocr_df <- data.frame(cbind(x=unlist(performance_s4_obj@x.values),
y=unlist(performance_s4_obj@y.values)))
ggplot2::ggplot(perf_auc_rocr_df, aes(x=x, y=y)) +
geom_point() +
geom_line() +
xlab("False Positive Rate") +
ylab("False Positive Rate") +
ggtitle(title)
}
pred_auc_rocr_f <- prediction(predictions=pred_auc_f$pred, labels=outcome_2)
perf_auc_rocr_f <- performance(pred_auc_rocr_f,"tpr","fpr")
plot_auc(perf_auc_rocr_f, title="ROC under SuperLearner AUC Loss")
pred_nnls_rocr_f <- prediction(predictions=pred_nnls_f$pred, labels=outcome_2)
perf_nnls_rocr_f <- performance(pred_nnls_rocr_f,"tpr","fpr")
plot_auc(perf_nnls_rocr_f, title="ROC under SuperLearner NNLS Loss")
pred_ll_rocr_f <- prediction(predictions=pred_ll_f$pred, labels=outcome_2)
perf_ll_rocr_f <- performance(pred_ll_rocr_f,"tpr","fpr")
plot_auc(perf_ll_rocr_f, title="ROC under SuperLearner NNLL Loss")
library(ROCR)
plot_auc <- function(performance_s4_obj, title="") {
require(ggplot2)
perf_auc_rocr_df <- data.frame(cbind(x=unlist(performance_s4_obj@x.values),
y=unlist(performance_s4_obj@y.values)))
ggplot2::ggplot(perf_auc_rocr_df, aes(x=x, y=y)) +
geom_point() +
geom_line() +
xlab("False Positive Rate") +
ylab("True Positive Rate") +
ggtitle(title)
}
pred_auc_rocr_f <- prediction(predictions=pred_auc_f$pred, labels=outcome_2)
perf_auc_rocr_f <- performance(pred_auc_rocr_f,"tpr","fpr")
plot_auc(perf_auc_rocr_f, title="ROC under SuperLearner AUC Loss")
pred_nnls_rocr_f <- prediction(predictions=pred_nnls_f$pred, labels=outcome_2)
perf_nnls_rocr_f <- performance(pred_nnls_rocr_f,"tpr","fpr")
plot_auc(perf_nnls_rocr_f, title="ROC under SuperLearner NNLS Loss")
pred_ll_rocr_f <- prediction(predictions=pred_ll_f$pred, labels=outcome_2)
perf_ll_rocr_f <- performance(pred_ll_rocr_f,"tpr","fpr")
plot_auc(perf_ll_rocr_f, title="ROC under SuperLearner NNLL Loss")
sl_fit_ll_f
library(readr)
endo <- read_csv("../../data/machine-learning/mann-whitney/model-8020.csv")[,-1]
endo <- read_csv("../../data/machine-learning/mann-whitney/model-8020.csv")[,-1]
names(endo)[1] <- "id"
head(endo)
library(caret)
df2 <- cor(gene_predictors)
hc  <- findCorrelation(df2, cutoff=0.7) # putt any value as a "cutoff"
hc  <- sort(hc)
reduced_genes <- gene_predictors[,-c(hc)]
dim(reduced_genes)
dim(endo)
library(caret)
df2 <- cor(gene_predictors)
hc  <- findCorrelation(df2, cutoff=0.9) # putt any value as a "cutoff"
hc  <- sort(hc)
reduced_genes <- gene_predictors[,-c(hc)]
dim(reduced_genes)
library(dplyr)
gene_predictors <- endo %>% dplyr::select(-id, -tissue, -endometriosis, -severity)
outcome         <- ifelse(endo %>% dplyr::select(endometriosis)=="Endometriosis", 1, 0)
library(caret)
df2 <- cor(gene_predictors)
hc  <- findCorrelation(df2, cutoff=0.9) # putt any value as a "cutoff"
hc  <- sort(hc)
endo <- gene_predictors[,-c(hc)]
dim(endo)
library(caret)
df2 <- cor(gene_predictors)
hc  <- findCorrelation(df2, cutoff=0.8) # putt any value as a "cutoff"
hc  <- sort(hc)
endo <- gene_predictors[,-c(hc)]
dim(endo)
library(readr)
endo <- read_csv("../../data/machine-learning/mann-whitney/model-8020.csv")[,-1]
names(endo)[1] <- "id"
head(endo)
dim(endo)
library(readr)
library(dplyr)
modcloth_sample <- read_csv("data/modcloth_sample.csv")[,-1] %>% select(-user_name)
head(modcloth_sample, 10)
table(modcloth_sample$fit)
not_fit <- modcloth_sample %>% filter(fit != "fit")
head(not_fit, 10)
library(ggplot2)
not_fit <- not_fit %>% filter(!is.na(hips)) %>% filter(!is.na(fit))
ggplot(not_fit, aes(x=hips, fill=fit)) +
geom_histogram(col="black", lwd=0.2, binwidth=1.5) +
ggtitle("Histogram of hip size")
not_fit <- not_fit %>% filter(!is.na(hips)) %>% filter(!is.na(fit))
ggplot(not_fit, aes(y=hips, x=fit, fill=fit)) +
geom_boxplot(lwd=0.5) +
ggtitle("Histogram of hip size")
library(ggplot2)
not_fit <- not_fit %>% filter(!is.na(hips)) %>% filter(!is.na(fit))
ggplot(not_fit, aes(x=hips, fill=fit)) +
geom_histogram(col="black", lwd=0.2, binwidth=1.5) +
ggtitle("Histogram of hip size")
not_fit <- not_fit %>% filter(!is.na(hips)) %>% filter(!is.na(fit))
ggplot(not_fit, aes(y=hips, x=fit, fill=fit)) +
geom_boxplot(lwd=0.5) +
ggtitle("Histogram of hip size")
not_fit <- not_fit %>% select(fit, hips) %>% arrange(hips)
head(not_fit, 10)
not_fit <- not_fit %>% select(fit, hips) %>% arrange(hips)
head(not_fit, 10)
not_fit
not_fit %>% sample_n(12)
1+2.5+2.5+4.5+8+9
4.5+6+7+10+11+12
27.5-39/(sqrt(13)/2)
(27.5-39)/(sqrt(13)/2)
choose(2,3)*(0.2)^3*(0.1)
choose(2,3)*(0.2)^3*(0.8)
choose(2,3)
choose(3,2)*(0.2)^3*(0.8)
library(SuperLearner)
SL.wrappers()
method.NNloglik
method.AUC
library(readr)
endo <- read_csv("../../data/machine-learning/two-fold/model-8020.csv")[,-1]
names(endo)[1] <- "id"
head(endo)
library(dplyr)
gene_predictors <- endo %>% dplyr::select(-id, -tissue, -endometriosis, -severity)
outcome         <- ifelse(endo %>% dplyr::select(endometriosis)=="Endometriosis", 1, 0)
library(SuperLearner)
# * GLMNET IS LASSO
sl_lib <- c("SL.mean", "SL.knn", "SL.svm", "SL.glmnet", "SL.randomForest", "SL.lda",  "SL.nnet", "SL.bayesglm")
sl_lib_auc <- c("SL.mean", "SL.svm", "SL.glmnet", "SL.randomForest", "SL.lda",  "SL.nnet", "SL.bayesglm") # * REMOVE KNN BECAUSE IT'S BEING RUDE TO ME
sl_fit_nnls_f <- SuperLearner(Y=outcome, X=gene_predictors, family=binomial(), SL.library=sl_lib, cvControl=list(V=7))
sl_fit_nnls_f
sl_fit_auc_f <- SuperLearner(Y=outcome, X=gene_predictors, family=binomial(), SL.library=sl_lib_auc, method = "method.AUC", cvControl=list(V=7))
sl_fit_auc_f
sl_fit_ll_f <- SuperLearner(Y=outcome, X=gene_predictors, family=binomial(), SL.library=sl_lib_auc, method = "method.NNloglik", cvControl=list(V=7))
sl_fit_ll_f
endo_2 <- read_csv("../../data/machine-learning/two-fold/validation-8020.csv")[,-1]
names(endo_2)[1] <- "id"
gene_predictors_2 <- endo_2 %>% dplyr::select(-id, -tissue, -endometriosis, -severity)
outcome_2         <- ifelse(endo_2 %>% dplyr::select(endometriosis)=="Endometriosis", 1, 0)
pred_nnls_f    <- predict(sl_fit_nnls_f, gene_predictors_2, onlySL=T)
pred_nnls_df_f <- data.frame(cbind(round(pred_nnls_f$pred), outcome_2))
sum(pred_nnls_df_f[,1]==pred_nnls_df_f[,2]) / nrow(pred_nnls_df_f)
pred_auc_f    <- predict(sl_fit_auc_f, newdata=gene_predictors_2)
pred_auc_df_f <- data.frame(cbind(round(pred_auc_f$pred), outcome_2))
sum(pred_auc_df_f[,1]==pred_auc_df_f[,2]) / nrow(pred_auc_df_f)
pred_ll_f    <- predict(sl_fit_ll_f, gene_predictors_2, onlySL=T)
pred_ll_df_f <- data.frame(cbind(round(pred_ll_f$pred), outcome_2))
sum(pred_ll_df_f[,1]==pred_ll_df_f[,2]) / nrow(pred_ll_df_f)
which(pred_nnls_df_f[,1]!=pred_nnls_df_f[,2])
which(pred_auc_df_f[,1]!=pred_auc_df_f[,2])
which(pred_ll_df_f[,1]!=pred_ll_df_f[,2])
endo_2[c(8,15),]
library(ROCR)
plot_auc <- function(performance_s4_obj, title="") {
require(ggplot2)
perf_auc_rocr_df <- data.frame(cbind(x=unlist(performance_s4_obj@x.values),
y=unlist(performance_s4_obj@y.values)))
ggplot2::ggplot(perf_auc_rocr_df, aes(x=x, y=y)) +
geom_point() +
geom_line() +
xlab("False Positive Rate") +
ylab("True Positive Rate") +
ggtitle(title)
}
pred_auc_rocr_f <- prediction(predictions=pred_auc_f$pred, labels=outcome_2)
perf_auc_rocr_f <- performance(pred_auc_rocr_f,"tpr","fpr")
plot_auc(perf_auc_rocr_f, title="ROC under SuperLearner AUC Loss")
pred_nnls_rocr_f <- prediction(predictions=pred_nnls_f$pred, labels=outcome_2)
perf_nnls_rocr_f <- performance(pred_nnls_rocr_f,"tpr","fpr")
plot_auc(perf_nnls_rocr_f, title="ROC under SuperLearner NNLS Loss")
pred_ll_rocr_f <- prediction(predictions=pred_ll_f$pred, labels=outcome_2)
perf_ll_rocr_f <- performance(pred_ll_rocr_f,"tpr","fpr")
plot_auc(perf_ll_rocr_f, title="ROC under SuperLearner NNLL Loss")
perf_auc_rocr_f_auc <- performance(pred_auc_rocr_f, measure="auc")
perf_auc_rocr_f_auc@y.values[[1]]
perf_nnls_rocr_f_auc <- performance(pred_nnls_rocr_f, measure="auc")
perf_nnls_rocr_f_auc@y.values[[1]]
perf_nnll_rocr_f_auc <- performance(pred_ll_rocr_f, measure="auc")
perf_nnll_rocr_f_auc@y.values[[1]]
cv_auc <- CV.SuperLearner(Y=outcome, X=gene_predictors, SL.library=sl_lib_auc, family=binomial(), cvControl=list(V=7), method="method.AUC")
summary(cv_auc)
cv_auc$AllSL
nrow(gene_predictors_2)
nrow(gene_predictors_2) %>% sample_n(size=15, replace=TRUE)
sample(x=1:nrow(endo_2), size=nrow(endo_2), replace=TRUE))
sample(x=1:nrow(endo_2), size=nrow(endo_2), replace=TRUE)
new_ix <-sample(x=1:nrow(endo_2), size=nrow(endo_2), replace=TRUE)
boot_sample <- gene_predictors_2[new_ix,]
boot_outcome <- outcome_2[new_ix,]
boot_sample
auc_func <- function(sl_fit_obj, predictors, outcomes) {
predict_obj     <- predict(sl_fit_obj, newdata=predictors)
performance_obj <- performance(predict_obj, measure="auc")
performance_obj@y.values[[1]]
}
auc_func(sl_fit_auc_f, boot_sample, boot_outcomes)
auc_func <- function(sl_fit_obj, predictors, outcomes) {
predict_obj     <- predict(sl_fit_obj, newdata=predictors)
predict2_obj    <- prediction(predictions=predict_obj$pred, labels=outomces)
performance_obj <- performance(predict_obj, measure="auc")
performance_obj@y.values[[1]]
}
auc_func(sl_fit_auc_f, boot_sample, boot_outcomes)
auc_func <- function(sl_fit_obj, predictors, outcomes) {
predict_obj     <- predict(sl_fit_obj, newdata=predictors)
predict2_obj    <- prediction(predictions=predict_obj$pred, labels=outcomes)
performance_obj <- performance(predict_obj, measure="auc")
performance_obj@y.values[[1]]
}
auc_func(sl_fit_auc_f, boot_sample, boot_outcomes)
auc_func(sl_fit_auc_f, boot_sample, boot_outcome)
predict_obj     <- predict(sl_fit_auc_f, newdata=predictors)
new_ix <-sample(x=1:nrow(endo_2), size=nrow(endo_2), replace=TRUE)
boot_sample <- gene_predictors_2[new_ix,]
boot_outcome <- outcome_2[new_ix,]
predict_obj     <- predict(sl_fit_auc_f, newdata=boot_sample)
predict_obj
new_ix        <- sample(x=1:nrow(endo_2), size=nrow(endo_2), replace=TRUE)
boot_sample   <- gene_predictors_2[new_ix,]
boot_outcomes <- outcome_2[new_ix,]
predict2_obj    <- prediction(predictions=predict_obj$pred, labels=boot_outcomes)
performance_obj <- performance(predict_obj, measure="auc")
performance_obj <- performance(predict2_obj, measure="auc")
auc_func <- function(sl_fit_obj, predictors, outcomes) {
predict_obj     <- predict(sl_fit_obj, newdata=predictors)
predict2_obj    <- prediction(predictions=predict_obj$pred, labels=outcomes)
performance_obj <- performance(predict2_obj, measure="auc")
performance_obj@y.values[[1]]
}
auc_func(sl_fit_auc_f, boot_sample, boot_outcome)
predict_obj     <- predict(sl_fit_auc_f, newdata=boot_sample)
predict2_obj    <- prediction(predictions=predict_obj$pred, labels=boot_outcomes)
performance_obj <- performance(predict2_obj, measure="auc")
performance_obj@y.values[[1]]
predict_obj     <- predict(sl_fit_auc_f, newdata=boot_sample)
predict2_obj    <- prediction(predictions=predict_obj$pred, labels=boot_outcomes)
performance_obj <- performance(predict2_obj, measure="auc")
performance_obj@y.values[[1]]
predict_obj     <- predict(sl_fit_auc_f, newdata=boot_sample)
predict2_obj    <- prediction(predictions=predict_obj$pred, labels=boot_outcomes)
performance_obj <- performance(predict2_obj, measure="auc")
performance_obj@y.values[[1]]
auc_func(sl_fit_auc_f, boot_sample, boot_outcome)
predict_obj     <- predict(sl_fit_auc_f, newdata=boot_sample)
predict2_obj    <- prediction(predictions=predict_obj$pred, labels=boot_outcomes)
performance_obj <- performance(predict2_obj, measure="auc")
performance_obj@y.values[[1]]
auc_func <- function(sl_fit_obj, predictors, outcomes) {
predict_obj     <- predict(sl_fit_obj, newdata=predictors)
predict2_obj    <- prediction(predictions=predict_obj$pred, labels=outcomes)
performance_obj <- performance(predict2_obj, measure="auc")
performance_obj@y.values[[1]]
}
auc_func(sl_fit_auc_f, boot_sample, boot_outcome)
auc_func(sl_fit_auc_f, boot_sample, boot_outcome)
auc_func(sl_fit_auc_f, boot_sample, boot_outcomes)
boot_auc <- lapply(1:1000, function(x) {
new_ix        <- sample(x=1:nrow(endo_2), size=nrow(endo_2), replace=TRUE)
boot_sample   <- gene_predictors_2[new_ix,]
boot_outcomes <- outcome_2[new_ix,]
auc_func(sl_fit_auc_f, boot_sample, boot_outcomes)
})
boot_outcomes
outcomes
outcomes_2
outcome_2
dim(outcome_2)
dim(gene_predictors_2)
boot_auc <- lapply(1:1000, function(x) {
new_ix        <- sample(x=1:nrow(endo_2), size=nrow(endo_2), replace=TRUE)
boot_sample   <- gene_predictors_2[new_ix,]
boot_outcomes <- outcome_2[new_ix,]
auc_func(sl_fit_auc_f, boot_sample, boot_outcomes)
})
boot_auc
unlist(boot_auc)
summary(unlist(boot_auc))
data.frame(boot_auc)
data.frame(unlist(boot_auc))
data.frame(boot=unlist(boot_auc))
ggplot(data.frame(boot=unlist(boot_auc)), aes(x=boot)) + geom_histogram()
ggplot(data.frame(boot=unlist(boot_auc)), aes(x=boot)) + geom_histogram(binwidth=0.1)
ggplot(data.frame(boot=unlist(boot_auc)), aes(x=boot)) + geom_histogram(binwidth=0.05)
ggplot(data.frame(boot=unlist(boot_auc)), aes(x=boot)) + geom_histogram(binwidth=0.025, col="black")
ggplot(data.frame(boot=unlist(boot_auc)), aes(x=boot)) + geom_histogram(binwidth=0.025, col="black", fill="pink2")
ggplot(data.frame(boot=unlist(boot_auc)), aes(x=boot)) +
geom_histogram(binwidth=0.025, col="black", fill="pink2") +
ggtitle("Bootstrap AUC values under AUC Loss") +
xlab("Bootstrap AUC")
ggplot(data.frame(boot=unlist(boot_auc)), aes(x=boot)) +
geom_histogram(binwidth=0.025, col="black", fill="pink") +
ggtitle("Bootstrap AUC values under AUC Loss") +
xlab("Bootstrap AUC")
boot_auc_2 <- lapply(1:1000, function(x) {
new_ix        <- sample(x=1:nrow(endo_2), size=nrow(endo_2), replace=TRUE)
boot_sample   <- gene_predictors_2[new_ix,]
boot_outcomes <- outcome_2[new_ix,]
auc_func(sl_fit_ll_f, boot_sample, boot_outcomes)
})
ggplot(data.frame(boot=unlist(boot_auc_2)), aes(x=boot)) +
geom_histogram(binwidth=0.025, col="black", fill="pink") +
ggtitle("Bootstrap AUC values under Log Loss") +
xlab("Bootstrap AUC")
ggplot(data.frame(boot=unlist(boot_auc_2)), aes(x=boot)) +
geom_histogram(binwidth=0.025, col="black", fill="pink") +
ggtitle("Bootstrap AUC values under Log-Likelihood Loss") +
xlab("Bootstrap AUC")
ggplot(data.frame(boot=unlist(boot_auc)), aes(x=boot)) +
geom_histogram(binwidth=0.025, col="black", fill="pink") +
ggtitle("Bootstrap AUC values under AUC loss") +
xlab("Bootstrap AUC")
ggplot(data.frame(boot=unlist(boot_auc_2)), aes(x=boot)) +
geom_histogram(binwidth=0.025, col="black", fill="pink") +
ggtitle("Bootstrap AUC values under log-likelihood loss") +
xlab("Bootstrap AUC")
ggplot(data.frame(boot=unlist(boot_auc_2)), aes(x=boot)) +
geom_histogram(binwidth=0.025, col="black", fill="pink") +
ggtitle("Bootstrap AUC values under least-squares loss") +
xlab("Bootstrap AUC")
summary(unlist(boot_auc))
quantile(unlist(boot_auc), 0.025)
quantile(unlist(boot_auc), 0.975)
quantile(unlist(boot_auc_2), 0.025)
quantile(unlist(boot_auc_2), 0.975)
quantile(unlist(boot_auc_2), 0.025)
quantile(unlist(boot_auc_2), 0.975)
quantile(unlist(boot_auc_2), 0.025)
quantile(unlist(boot_auc_3), 0.025)
quantile(unlist(boot_auc_3), 0.025)
boot_auc_3 <- lapply(1:1000, function(x) {
new_ix        <- sample(x=1:nrow(endo_2), size=nrow(endo_2), replace=TRUE)
boot_sample   <- gene_predictors_2[new_ix,]
boot_outcomes <- outcome_2[new_ix,]
auc_func(sl_fit_nnls_f, boot_sample, boot_outcomes)
})
boot_auc_3 <- lapply(1:1000, function(x) {
new_ix        <- sample(x=1:nrow(endo_2), size=nrow(endo_2), replace=TRUE)
boot_sample   <- gene_predictors_2[new_ix,]
boot_outcomes <- outcome_2[new_ix,]
auc_func(sl_fit_nnls_f, boot_sample, boot_outcomes)
})
sl_fit_nnls_f <- SuperLearner(Y=outcome, X=gene_predictors, family=binomial(), SL.library=sl_lib_auc, cvControl=list(V=7))
sl_fit_nnls_f
boot_auc_3 <- lapply(1:1000, function(x) {
new_ix        <- sample(x=1:nrow(endo_2), size=nrow(endo_2), replace=TRUE)
boot_sample   <- gene_predictors_2[new_ix,]
boot_outcomes <- outcome_2[new_ix,]
auc_func(sl_fit_nnls_f, boot_sample, boot_outcomes)
})
boot_auc_3 <- lapply(1:1000, function(x) {
new_ix        <- sample(x=1:nrow(endo_2), size=nrow(endo_2), replace=TRUE)
boot_sample   <- gene_predictors_2[new_ix,]
boot_outcomes <- outcome_2[new_ix,]
auc_func(sl_fit_nnls_f, boot_sample, boot_outcomes)
})
